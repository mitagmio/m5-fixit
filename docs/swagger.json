{
    "schemes": [
        "https"
    ],
    "swagger": "2.0",
    "info": {
        "description": "API for managing users and games in TG-Dice application",
        "title": "TG-Dice API",
        "contact": {},
        "version": "1.0"
    },
    "host": "api.m5dice.com",
    "basePath": "/",
    "paths": {
        "/bot/balance": {
            "get": {
                "description": "Возвращает все балансы бота",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bot-balance"
                ],
                "summary": "Получает все балансы бота",
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.BotBalanceEntity"
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении баланса бота",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/bot/balance/add": {
            "post": {
                "description": "Adds the specified amount of tokens to the bot balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bot-balance"
                ],
                "summary": "Add tokens to bot balance",
                "parameters": [
                    {
                        "description": "Token type and amount to add",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.AddTokensToBotBalanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/bot/balance/subtract": {
            "post": {
                "description": "Subtracts the specified amount of tokens from the bot balance",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bot-balance"
                ],
                "summary": "Subtract tokens from bot balance",
                "parameters": [
                    {
                        "description": "Token type and amount to subtract",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.SubtractTokensFromBotBalanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Success message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Validation error or invalid parameters",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/bot/balance/{tokenType}": {
            "get": {
                "description": "Возвращает баланс конкретного токена",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bot-balance"
                ],
                "summary": "Получает баланс конкретного токена",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Тип токена (ton_balance, m5_balance, dfc_balance)",
                        "name": "tokenType",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "number"
                        }
                    },
                    "400": {
                        "description": "Некорректный тип токена",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении баланса токена",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/games/bot/balance": {
            "post": {
                "description": "Initialize bot balance in the system",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bot"
                ],
                "summary": "Initialize Bot Balance",
                "parameters": [
                    {
                        "description": "Bot balance data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.InitializeBotBalanceRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Баланс бота успешно инициализирован",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка с параметрами запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при обработке запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/games/dice": {
            "post": {
                "description": "Play a dice game with the bot, returning detailed round-by-round results",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "bot",
                    "games"
                ],
                "summary": "Play Dice Game with Bot",
                "parameters": [
                    {
                        "description": "Game data",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.PlayDiceGameRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Игровой результат",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Ошибка с параметрами запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при обработке запроса",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/games/history": {
            "get": {
                "description": "Возвращает список последних игр с ограничением по количеству",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game-history"
                ],
                "summary": "Получает общую историю игр",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Лимит количества записей",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/general.GameRecord"
                            }
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении истории игр",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            },
            "post": {
                "description": "Сохраняет данные игры (имена игроков, счета, победителя, заработанные средства, тип токена, сумму ставки)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game-history"
                ],
                "summary": "Создает запись об игре",
                "parameters": [
                    {
                        "description": "Информация об игре",
                        "name": "gameRecord",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/general.GameRecord"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Игра сохранена успешно",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при сохранении игры",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/games/history/{wallet}": {
            "get": {
                "description": "Возвращает список последних игр для конкретного пользователя по кошельку с ограничением по количеству",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "game-history"
                ],
                "summary": "Получает историю игр пользователя",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Кошелек пользователя",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Лимит количества записей",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/general.GameRecord"
                            }
                        }
                    },
                    "400": {
                        "description": "Некорректный кошелек",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Ошибка при получении истории игр",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/games/simulate-user-win/{wallet}": {
            "post": {
                "description": "Симулирует игру, где пользователь выигрывает. Результат игры и начисление кубов.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "games"
                ],
                "summary": "Симуляция победы пользователя в игре",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet адрес пользователя",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "result: game result",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "error: wallet is required",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "error: error message",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/promocodes/activate": {
            "post": {
                "description": "Activate a promocode by providing the code and user wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromoCodes"
                ],
                "summary": "Activate a promocode",
                "parameters": [
                    {
                        "description": "Activation request (wallet and code)",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Promocode activated successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "404": {
                        "description": "Promocode or user not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/promocodes/active": {
            "get": {
                "description": "Retrieve all active promocodes",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromoCodes"
                ],
                "summary": "List active promocodes",
                "responses": {
                    "200": {
                        "description": "List of active promocodes",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entity.PromoCodeEntity"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/promocodes/create": {
            "post": {
                "description": "Create a promocode with details like code, type, amount, and activations",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromoCodes"
                ],
                "summary": "Create a new promocode",
                "parameters": [
                    {
                        "description": "Promocode details",
                        "name": "request",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entity.PromoCodeEntity"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Promocode created successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "400": {
                        "description": "Invalid request payload",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/promocodes/expire": {
            "post": {
                "description": "Mark all expired promocodes as expired",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromoCodes"
                ],
                "summary": "Expire outdated promocodes",
                "responses": {
                    "200": {
                        "description": "Expired promocodes successfully",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/promocodes/{code}": {
            "get": {
                "description": "Retrieve details of a specific promocode by its code",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "PromoCodes"
                ],
                "summary": "Get promocode details",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Promocode code",
                        "name": "code",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Promocode details",
                        "schema": {
                            "$ref": "#/definitions/entity.PromoCodeEntity"
                        }
                    },
                    "404": {
                        "description": "Promocode not found",
                        "schema": {
                            "type": "string"
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "string"
                        }
                    }
                }
            }
        },
        "/referrals/level": {
            "get": {
                "description": "Возвращает список рефералов на заданном уровне",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "referrals"
                ],
                "summary": "Получение рефералов по уровню",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Referral code",
                        "name": "referral_code",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Level (1, 2, or 3)",
                        "name": "level",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/odm_entities.UserEntity"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/referrals/levels": {
            "get": {
                "description": "Возвращает список рефералов, разделенных по уровням (level1, level2, level3)",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "referrals"
                ],
                "summary": "Получение рефералов по уровням",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Wallet address",
                        "name": "wallet",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "array",
                                "items": {
                                    "type": "string"
                                }
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/referrals/total": {
            "get": {
                "description": "Возвращает общее количество рефералов для данного реферального кода",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "referrals"
                ],
                "summary": "Получение общего количества рефералов",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Referral code",
                        "name": "referral_code",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "integer"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/slots/balance": {
            "get": {
                "description": "Возвращает общий баланс в тоннах и кубах",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Получение общего баланса",
                "responses": {
                    "200": {
                        "description": "Общий баланс",
                        "schema": {
                            "$ref": "#/definitions/slots.SlotsBalanceResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/slots/balance/add": {
            "post": {
                "description": "Добавляет указанное количество токенов к балансу",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Добавление токенов",
                "parameters": [
                    {
                        "description": "Данные для добавления токенов",
                        "name": "tokenOperationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/slots.TokenOperationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Токены успешно добавлены",
                        "schema": {
                            "$ref": "#/definitions/slots.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные запроса",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/slots/balance/initialize": {
            "post": {
                "description": "Устанавливает общий баланс в тоннах и кубах",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Инициализация баланса",
                "parameters": [
                    {
                        "description": "Данные для инициализации баланса",
                        "name": "initializeBalanceRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/slots.InitializeBalanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Баланс успешно инициализирован",
                        "schema": {
                            "$ref": "#/definitions/slots.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные запроса",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/slots/balance/subtract": {
            "post": {
                "description": "Вычитает указанное количество токенов из баланса",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Вычитание токенов",
                "parameters": [
                    {
                        "description": "Данные для вычитания токенов",
                        "name": "tokenOperationRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/slots.TokenOperationRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Токены успешно вычтены",
                        "schema": {
                            "$ref": "#/definitions/slots.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные запроса",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/slots/balance/update": {
            "patch": {
                "description": "Изменяет общий баланс в тоннах и кубах",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Обновление баланса",
                "parameters": [
                    {
                        "description": "Данные для обновления баланса",
                        "name": "updateBalanceRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/slots.UpdateBalanceRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Баланс успешно обновлен",
                        "schema": {
                            "$ref": "#/definitions/slots.SuccessResponse"
                        }
                    },
                    "400": {
                        "description": "Некорректные данные запроса",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/slots/history": {
            "get": {
                "description": "Получить список всех игр в слоты с ограничением по количеству",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Получить историю всех игр в слоты",
                "parameters": [
                    {
                        "type": "integer",
                        "default": 50,
                        "description": "Лимит количества игр",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список игр",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/slots.GameRecord"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка с некорректным лимитом",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера при получении игр",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/slots/play": {
            "post": {
                "description": "Выполнение игры в слоты с выбором ставки",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Запуск игры в слоты",
                "parameters": [
                    {
                        "description": "Параметры игры",
                        "name": "playSlotRequest",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/slots.PlaySlotRequest"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Результат игры",
                        "schema": {
                            "$ref": "#/definitions/slots.PlaySlotResponse"
                        }
                    },
                    "400": {
                        "description": "Ошибка с некорректной ставкой",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/slots/{wallet}/games": {
            "get": {
                "description": "Получить все игры, сыгранные пользователем по его кошельку",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Получить все игры по кошельку",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Кошелек игрока",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Лимит количества игр",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список игр",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/slots.GameRecord"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка с некорректным лимитом",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера при получении игр",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/slots/{wallet}/recent-games": {
            "get": {
                "description": "Получить последние игры пользователя по его кошельку",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Slots"
                ],
                "summary": "Получить последние игры по кошельку",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Кошелек игрока",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Лимит количества игр",
                        "name": "limit",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Список последних игр",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/slots.GameRecord"
                            }
                        }
                    },
                    "400": {
                        "description": "Ошибка с некорректным лимитом",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Ошибка сервера при получении последних игр",
                        "schema": {
                            "$ref": "#/definitions/slots.ErrorResponse"
                        }
                    }
                }
            }
        },
        "/test": {
            "get": {
                "description": "Generate test query string for Telegram WebApp authentication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Generate test query",
                "responses": {
                    "200": {
                        "description": "Generated query string",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/test_post": {
            "post": {
                "description": "Test endpoint for validating Telegram WebApp authentication",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "test"
                ],
                "summary": "Test query validation",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Telegram WebApp authentication data",
                        "name": "query",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Query validation passed",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "401": {
                        "description": "Unauthorized",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users": {
            "get": {
                "description": "Retrieve a list of users with optional pagination",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "List users with pagination",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of users to retrieve",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "post": {
                "description": "Для создания Необходим только валлет",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Create a new user",
                "parameters": [
                    {
                        "description": "User details",
                        "name": "user",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/entities.User"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "$ref": "#/definitions/entities.User"
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/name/{name}": {
            "get": {
                "description": "Retrieve a user by their unique name",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by name",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Name",
                        "name": "name",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/points": {
            "get": {
                "description": "Retrieve a list of users sorted by their points in descending order",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get users sorted by points",
                "parameters": [
                    {
                        "type": "integer",
                        "description": "Number of users to retrieve",
                        "name": "limit",
                        "in": "query"
                    },
                    {
                        "type": "integer",
                        "description": "Offset for pagination",
                        "name": "offset",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/entities.User"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/tgid/{tgid}": {
            "patch": {
                "description": "Update only specific fields of a user identified by TgID",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Partially update a user by TgID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Telegram ID",
                        "name": "tgid",
                        "in": "path",
                        "required": true
                    },
                    {
                        "description": "Fields to update",
                        "name": "updateData",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Updated fields",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/withdrawal/{id}": {
            "get": {
                "description": "Retrieve a withdrawal by its unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a withdrawal by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Withdrawal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Withdrawal details",
                        "schema": {
                            "$ref": "#/definitions/controllers.Withdrawal"
                        }
                    },
                    "404": {
                        "description": "Withdrawal not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a withdrawal request by its unique ID",
                "tags": [
                    "users"
                ],
                "summary": "Delete a withdrawal by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Withdrawal ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Withdrawal deleted successfully",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Withdrawal not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/withdrawals/last-50": {
            "get": {
                "description": "Retrieve the last 50 withdrawals in the system",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the last 50 withdrawals",
                "responses": {
                    "200": {
                        "description": "List of the last 50 withdrawals",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.Withdrawal"
                            }
                        }
                    },
                    "500": {
                        "description": "Error fetching withdrawals",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/withdrawals/last-50-with-jetton": {
            "get": {
                "description": "Retrieve the last 50 withdrawals that include jetton",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the last 50 withdrawals with jetton",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Wallet",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of the last 50 withdrawals with jetton",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.Withdrawal"
                            }
                        }
                    },
                    "500": {
                        "description": "Error fetching withdrawals with jetton",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/withdrawals/last-50-without-jetton": {
            "get": {
                "description": "Retrieve the last 50 withdrawals that do not include jetton",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get the last 50 withdrawals without jetton",
                "responses": {
                    "200": {
                        "description": "List of the last 50 withdrawals without jetton",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.Withdrawal"
                            }
                        }
                    },
                    "500": {
                        "description": "Error fetching withdrawals without jetton",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{id}": {
            "get": {
                "description": "Retrieve a user by their unique ID",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "$ref": "#/definitions/entities.User"
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            },
            "delete": {
                "description": "Delete a user from the system by their ID",
                "tags": [
                    "users"
                ],
                "summary": "Delete a user by ID",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User ID",
                        "name": "id",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "204": {
                        "description": "No Content"
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{wallet}/balances": {
            "get": {
                "description": "Get token balances (ton_balance, m5_balance, dfc_balance) and cubes for a user by their wallet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user balances",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Wallet",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Balances (ton_balance, m5_balance, dfc_balance, cubes)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "404": {
                        "description": "User not found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal server error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{wallet}/points": {
            "get": {
                "description": "Retrieve the points of a user by their wallet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get user points by wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Wallet",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User Points",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{wallet}/referral-code": {
            "get": {
                "description": "Retrieve the referral code for a user by their wallet",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get referral code by user wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Wallet",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{wallet}/referral-earnings": {
            "get": {
                "description": "Retrieve all referral earnings (ton_balance, m5_balance, dfc_balance) for a user by their wallet",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get referral earnings by user wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Wallet",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "Referral earnings (ton_balance, m5_balance, dfc_balance)",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "number"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "404": {
                        "description": "Not Found",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/users/{wallet}/withdrawals": {
            "get": {
                "description": "Retrieve a list of withdrawals for a user by their wallet address",
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "users"
                ],
                "summary": "Get withdrawals by user wallet",
                "parameters": [
                    {
                        "type": "string",
                        "description": "User Wallet",
                        "name": "wallet",
                        "in": "path",
                        "required": true
                    },
                    {
                        "type": "integer",
                        "description": "Number of withdrawals to retrieve",
                        "name": "limit",
                        "in": "query"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "List of withdrawals",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/controllers.Withdrawal"
                            }
                        }
                    },
                    "500": {
                        "description": "Error fetching withdrawals",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        },
        "/withdrawals": {
            "post": {
                "description": "Создание нового запроса на вывод средств",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "withdrawals"
                ],
                "summary": "Create a new withdrawal",
                "parameters": [
                    {
                        "description": "Withdrawal details",
                        "name": "withdrawal",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/controllers.CreateWithdrawalRequest"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "Created",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    },
                    "500": {
                        "description": "Internal Server Error",
                        "schema": {
                            "type": "object",
                            "additionalProperties": {
                                "type": "string"
                            }
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "controllers.AddTokensToBotBalanceRequest": {
            "type": "object",
            "required": [
                "amount",
                "token_type"
            ],
            "properties": {
                "amount": {
                    "description": "Сумма для добавления",
                    "type": "number"
                },
                "token_type": {
                    "description": "Тип токена (например, ton_balance)",
                    "type": "string"
                }
            }
        },
        "controllers.CreateWithdrawalRequest": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "jetton_name": {
                    "type": "string"
                },
                "wallet": {
                    "type": "string"
                }
            }
        },
        "controllers.InitializeBotBalanceRequest": {
            "type": "object",
            "required": [
                "dfc_balance",
                "m5_balance",
                "ton_balance"
            ],
            "properties": {
                "dfc_balance": {
                    "description": "Баланс DFC",
                    "type": "number"
                },
                "m5_balance": {
                    "description": "Баланс M5",
                    "type": "number"
                },
                "ton_balance": {
                    "description": "Баланс Ton",
                    "type": "number"
                }
            }
        },
        "controllers.PlayDiceGameRequest": {
            "type": "object",
            "required": [
                "bet_amount",
                "target_score",
                "token_type",
                "wallet"
            ],
            "properties": {
                "bet_amount": {
                    "description": "Ставка",
                    "type": "number"
                },
                "target_score": {
                    "description": "Цель по очкам",
                    "type": "integer",
                    "maximum": 45,
                    "minimum": 15
                },
                "token_type": {
                    "description": "Тип токена",
                    "type": "string"
                },
                "wallet": {
                    "description": "Адрес кошелька",
                    "type": "string"
                }
            }
        },
        "controllers.SubtractTokensFromBotBalanceRequest": {
            "type": "object",
            "required": [
                "amount",
                "token_type"
            ],
            "properties": {
                "amount": {
                    "description": "Сумма для вычитания",
                    "type": "number"
                },
                "token_type": {
                    "description": "Тип токена (например, ton_balance)",
                    "type": "string"
                }
            }
        },
        "controllers.Withdrawal": {
            "type": "object",
            "properties": {
                "amount": {
                    "type": "number"
                },
                "created_at": {
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "jetton_name": {
                    "type": "string"
                },
                "wallet": {
                    "type": "string"
                }
            }
        },
        "entities.BotBalanceEntity": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "dfc_balance": {
                    "type": "number"
                },
                "m5_balance": {
                    "type": "number"
                },
                "ton_balance": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                }
            }
        },
        "entities.User": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "cubes": {
                    "type": "integer"
                },
                "dfc_balance": {
                    "type": "number"
                },
                "first_name": {
                    "description": "Новое поле FirstName",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "m5_balance": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "points": {
                    "type": "number"
                },
                "referral_code": {
                    "type": "string"
                },
                "referral_earnings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "referred_by": {
                    "type": "string"
                },
                "tgid": {
                    "type": "string"
                },
                "ton_balance": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet": {
                    "type": "string"
                }
            }
        },
        "entity.PromoCodeEntity": {
            "type": "object",
            "properties": {
                "activatedWallets": {
                    "description": "List of wallets that have activated the promocode",
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                },
                "amount": {
                    "description": "Reward amount",
                    "type": "number"
                },
                "code": {
                    "description": "Unique code for the promocode",
                    "type": "string"
                },
                "createdAt": {
                    "description": "Creation timestamp",
                    "type": "string"
                },
                "expiresAt": {
                    "description": "Expiration date",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "maxActivations": {
                    "description": "Maximum activations allowed",
                    "type": "integer"
                },
                "status": {
                    "description": "Current status",
                    "allOf": [
                        {
                            "$ref": "#/definitions/entity.PromoCodeStatus"
                        }
                    ]
                },
                "tokenType": {
                    "description": "Reward type",
                    "type": "string"
                },
                "updatedAt": {
                    "description": "Last update timestamp",
                    "type": "string"
                },
                "usedActivations": {
                    "description": "Number of times the promocode has been used",
                    "type": "integer"
                }
            }
        },
        "entity.PromoCodeStatus": {
            "type": "string",
            "enum": [
                "active",
                "expired",
                "depleted"
            ],
            "x-enum-comments": {
                "Active": "Promocode is active and can be used",
                "Depleted": "Promocode has reached max activations",
                "Expired": "Promocode has expired"
            },
            "x-enum-varnames": [
                "Active",
                "Expired",
                "Depleted"
            ]
        },
        "general.GameRecord": {
            "type": "object",
            "properties": {
                "bet_amount": {
                    "description": "Сумма ставки",
                    "type": "number"
                },
                "counter": {
                    "description": "Changed to int64",
                    "type": "integer"
                },
                "player1_earnings": {
                    "description": "Заработок первого игрока",
                    "type": "number"
                },
                "player1_name": {
                    "description": "Имя первого игрока",
                    "type": "string"
                },
                "player1_score": {
                    "description": "Счет первого игрока",
                    "type": "integer"
                },
                "player1_wallet": {
                    "description": "Кошелек первого игрока",
                    "type": "string"
                },
                "player2_earnings": {
                    "description": "Заработок второго игрока",
                    "type": "number"
                },
                "player2_name": {
                    "description": "Имя второго игрока",
                    "type": "string"
                },
                "player2_score": {
                    "description": "Счет второго игрока",
                    "type": "integer"
                },
                "player2_wallet": {
                    "description": "Кошелек второго игрока",
                    "type": "string"
                },
                "time_played": {
                    "description": "Время игры (формат времени: RFC3339)",
                    "type": "string"
                },
                "token_type": {
                    "description": "Тип токена",
                    "type": "string"
                },
                "winner": {
                    "description": "Победитель",
                    "type": "string"
                }
            }
        },
        "odm_entities.UserEntity": {
            "type": "object",
            "properties": {
                "created_at": {
                    "type": "string"
                },
                "cubes": {
                    "type": "integer"
                },
                "dfc_balance": {
                    "type": "number"
                },
                "first_name": {
                    "description": "Новое поле FirstName",
                    "type": "string"
                },
                "id": {
                    "type": "string"
                },
                "language": {
                    "type": "string"
                },
                "m5_balance": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "points": {
                    "type": "number"
                },
                "referral_code": {
                    "type": "string"
                },
                "referral_earnings": {
                    "type": "object",
                    "additionalProperties": {
                        "type": "number"
                    }
                },
                "referred_by": {
                    "type": "string"
                },
                "tgid": {
                    "type": "string"
                },
                "ton_balance": {
                    "type": "number"
                },
                "updated_at": {
                    "type": "string"
                },
                "wallet": {
                    "type": "string"
                }
            }
        },
        "slots.ErrorResponse": {
            "type": "object",
            "properties": {
                "message": {
                    "description": "Сообщение об ошибке",
                    "type": "string"
                }
            }
        },
        "slots.GameRecord": {
            "type": "object",
            "properties": {
                "bet": {
                    "description": "Ставка",
                    "type": "number"
                },
                "betType": {
                    "description": "Тип ставки (ton или cubes)",
                    "type": "string"
                },
                "firstName": {
                    "description": "Имя игрока",
                    "type": "string"
                },
                "result": {
                    "description": "Результат игры",
                    "type": "string"
                },
                "timestamp": {
                    "description": "Время игры",
                    "type": "string"
                },
                "wallet": {
                    "description": "Кошелек игрока",
                    "type": "string"
                },
                "win_amount": {
                    "description": "Выигрыш",
                    "type": "number"
                }
            }
        },
        "slots.InitializeBalanceRequest": {
            "type": "object",
            "properties": {
                "cubes": {
                    "description": "Баланс в кубах",
                    "type": "number"
                },
                "tons": {
                    "description": "Баланс в тоннах",
                    "type": "number"
                }
            }
        },
        "slots.PlaySlotRequest": {
            "type": "object",
            "required": [
                "wallet"
            ],
            "properties": {
                "cubes": {
                    "description": "Ставка в кубах (опционально)",
                    "type": "integer"
                },
                "ton": {
                    "description": "Ставка в тоннах (опционально)",
                    "type": "number"
                },
                "wallet": {
                    "description": "Кошелек пользователя",
                    "type": "string"
                }
            }
        },
        "slots.PlaySlotResponse": {
            "type": "object",
            "properties": {
                "result_combo": {
                    "description": "Комбинация чисел",
                    "type": "array",
                    "items": {
                        "type": "integer"
                    }
                },
                "win_amount": {
                    "description": "Выигрыш",
                    "type": "number"
                }
            }
        },
        "slots.SlotsBalanceResponse": {
            "type": "object",
            "properties": {
                "cubes": {
                    "description": "Баланс в кубах",
                    "type": "number"
                },
                "tons": {
                    "description": "Баланс в тоннах",
                    "type": "number"
                },
                "updated_at": {
                    "description": "Время последнего обновления",
                    "type": "string"
                }
            }
        },
        "slots.SuccessResponse": {
            "type": "object",
            "properties": {
                "status": {
                    "description": "Статус успешного выполнения",
                    "type": "string"
                }
            }
        },
        "slots.TokenOperationRequest": {
            "type": "object",
            "required": [
                "amount",
                "token_type"
            ],
            "properties": {
                "amount": {
                    "description": "Сумма токенов",
                    "type": "number"
                },
                "token_type": {
                    "description": "Тип токенов (tons или cubes)",
                    "type": "string"
                }
            }
        },
        "slots.UpdateBalanceRequest": {
            "type": "object",
            "properties": {
                "cubes_delta": {
                    "description": "Изменение баланса в кубах",
                    "type": "number"
                },
                "tons_delta": {
                    "description": "Изменение баланса в тоннах",
                    "type": "number"
                }
            }
        }
    }
}